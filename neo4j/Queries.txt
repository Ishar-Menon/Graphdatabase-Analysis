MATCH (m:Message {id:1236950581249})-[:HAS_CREATOR]->(p:Person)
RETURN
  p.id AS personId,
  p.firstName AS firstName,
  p.lastName AS lastName
-------------------------------------
MATCH (person:Person {id:1129}),(post:Post {id:1236950581248})
CREATE (person)-[:LIKES {creationDate:20120903072657953}]->(post)
-------------------------------------
MATCH (:Person {id:1129})<-[:HAS_CREATOR]-(m:Message)-[:REPLY_OF*0..]->(p:Post) MATCH (p)-[:HAS_CREATOR]->(c)RETURN                                                                                                            
m.id as messageId,                                                                                                
CASE exists(m.content)                                                                                            
WHEN true THEN m.content                                                                                          
ELSE m.imageFile                                                                                                  
END AS messageContent,m.creationDate AS messageCreationDate,                                                                            
p.id AS originalPostId,                                                                                           
c.id AS originalPostAuthorId,c.firstName as originalPostAuthorFirstName,                                                                       
c.lastName as originalPostAuthorLastName                                                                          
ORDER BY messageCreationDate DESC                                                                                 
LIMIT 10
-------------------------------------
MATCH (:Person {id:10027})-[path:KNOWS*1..3]-(friend:Person) WHERE
friend.firstName = "Karan" WITH friend, min(length(path)) AS distance
ORDER BY distance ASC, friend.lastName ASC, toInteger(friend.id) ASC
LIMIT 20 MATCH (friend)-[:IS_LOCATED_IN]->(friendCity:Place) OPTIONAL MATCH
(friend)-[studyAt:STUDY_AT]->(uni:Organisation)-[:IS_LOCATED_IN]->(uniCity:Place)
WITH friend, collect( CASE uni.name WHEN null THEN null ELSE [uni.name, studyAt.classYear, uniCity.name] END )
AS unis, friendCity, distance OPTIONAL MATCH (friend)-[workAt:WORK_AT]->(company:Organisation)-[:IS_LOCATED_IN]->(companyCountry:Place)
WITH friend, collect( CASE company.name WHEN null THEN null ELSE [company.name, workAt.workFrom, companyCountry.name] END )
AS companies, unis, friendCity, distance RETURN friend.id AS friendId, friend.lastName AS friendLastName,
distance AS distanceFromPerson, friend.birthday AS friendBirthday, friend.creationDate
AS friendCreationDate, friend.gender AS friendGender, friend.browserUsed AS friendBrowserUsed,
friend.locationIP AS friendLocationIp, friend.email AS friendEmails, friend.speaks AS friendLanguages,
friendCity.name AS friendCityName, unis AS friendUniversities, companies AS friendCompanies
ORDER BY distanceFromPerson ASC, friendLastName ASC, toInteger(friendId) ASC LIMIT 20
-------------------------------------
MATCH (:Person {id:1129})-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(message:Message)
WHERE message.creationDate <= 20120903072657953
RETURN
  friend.id AS personId,
  friend.firstName AS personFirstName,
  friend.lastName AS personLastName,
  message.id AS messageId,
  CASE exists(message.content)
    WHEN true THEN message.content
    ELSE message.imageFile
  END AS messageContent,
  message.creationDate AS messageCreationDate
ORDER BY messageCreationDate DESC, toInteger(messageId) ASC
LIMIT 20